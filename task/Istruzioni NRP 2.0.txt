### Istruzioni per l'installazione e il setup della NRP + manipolatore Kuka Iiwa 14 ###

Nota: i comandi da eseguire su terminale sono preceduti dal simbolo "#".

1. Eseguire l'installazione della NRP (istruzioni al link https://bitbucket.org/hbpneurorobotics/neurorobotics-platform/src/master/)

2.1 Creare una nuova repo su GitHub (per contenere il materiale generato durante il lab training, in modo da facilitare la condivisione):
2.2 Clonare la repo sul proprio computer, in una cartella di preferenza, in cui si vuole tenere il progetto (es. Documenti)
  - aprire il terminale e recarsi nella directory scelta
  -# git clone https://github.com/<username GitHub>/<nome della repo>.git 
  (il link corretto può essere premendo il tasto verde "Code" sulla pagina della repo github)
2.3 Configurare la propria identità
  -# git config user.name "<John Smith>"
  -# git config user.email <john.smith@mail.com>

3. Guida rapida a un git (la prima volta basta eseguire solo i punti da 3.5 a 3.12, gli altri punti sono inclusi per gli utilizzi successivi)
  3.1 Controllare in che branch ci si trova, altrimenti si modificano i file sbagliati.
    -# git branch
    Appare la lista dei branch esistenti e in verde quello attuale.
  3.2 Se il branch è quello sbagliato, spostarsi su quello giusto.
    -# git checkout <nome_branch>
    Poi rifare git branch per avere conferma.
  3.3 Verificare che non ci siano modifiche non "committate" dall'ultima volta. Se ci sono, fare il commit (vedi sotto) o chiedere aiuto.
    -# git status    
  3.4 Sincronizzare i file locali con quelli aggiornati su GitHub (pull). Questo step è FONDAMENTALE per non lavorare su versioni vecchie ed avere dopo noiosi problemi di merge.
    -# git pull
  3.5 Fare le proprie modifiche ai file. In questo caso (prima volta) estrarre la cartella base_kuka.zip all'interno della propria repo locale
    - recarsi nella cartella in cui è stata scaricata base_kuka.zip
    -# unzip base_kuka.zip -d <indirizzo della directory locale con la repo, es. $HOME/Documenti/LaMiaRepo>
  3.6 Evidenziare quali file sono stati modificati (in rosso):
    -# git status
   Oppure visualizzare anche le modifiche stesse (opzionale):
    -# git diff
  3.7 Specificare i file che andranno nel prossimo commit (spesso tutti quelli rossi):
    -# git add <nomi file>
    Oppure per aggiungerli tutti:
    -# git add -A
  3.8 Controllare che siano stati aggiunti (in verde):
    -# git status
  3.9 Fare il commit delle proprie modifiche, descrivendo cosa si è fatto:
    -# git commit -m "<descrizione delle modifiche effettuate>"
  3.10 Verificare di nuovo lo status (i file committati non dovrebbero apparire):
    -# git status
  3.11 Caricare le modifiche su GitHub (facendo login con nome e password quando è richiesto):
    -# git push
  3.12 Controllare su github.com che le modifiche ci siano effettivamente
  
Gli step del punto 3. possono essere eseguiti ogni volta che si vogliono caricare le modifiche eseguiti ai propri file sulla repo online.
In alternativa (consigliato) è possibile usare uno dei software gratuiti per la gestione dei git, che hanno un'interfaccia grafica (es. GitKraken)

4.1 Estrarre la cartella kuka_iiwa_14_prismatic_gripper.zip all'interno della cartella $HBP/GazeboRosPackage/src, generata durante l'installazione della NRP (nota: $HBP rappresenta un alias per l'indirizzo della cartella NRP, utilizzabile solo se si è eseguita la prima parte del tutorial di installazione della NRP, dove viene aggiunta come variabile all'interno di $HOME/.bashrc)
  - da terminale, recarsi nella cartella in cui è stata scaricata kuka_iiwa_14_prismatic_gripper.zip (-# $HOME/Downloads, verosimilmente)
  -# unzip kuka_iiwa_14_prismatic_gripper.zip -d $HBP/GazeboRosPackages/src
4.2 Compilare la cartella GazeboRosPackages, che ora contiene il nuovo pacchetto appena aggiunto
  -# cd $HBP/GazeboRosPackages
  -# catkin_make

5a. Estrarre la cartella  kuka_iiwa_14_prismatic_gripper_model.zip, cambiarle il nome in modo da farlo coincidere con quello del pacchetto (questo perchè i file all'interno del pacchetto "kuka_iiwa_14_prismatic_gripper" fanno riferimento a un modello con lo stesso nome, senza "_model" in fondo) e lanciare lo script ./create-symlinks.sh
  - da terminale, recarsi nella cartella in cui è stata scaricata kuka_iiwa_14_prismatic_gripper.zip
  -# unzip kuka_iiwa_14_prismatic_gripper_model.zip -d $HBP/Models
  -# mv $HBP/Models/kuka_iiwa_14_prismatic_gripper_model $HBP/Models/kuka_iiwa_14_prismatic_gripper
  -# cd $HBP/Models 
  -# ./create-symlinks.sh

5b. Installare Ros Control, MoveIt e utilizzare il Setup Assistant di MoveIt per generare un pacchetto che conterrà i controllori per il robot:
  5b.1 Installare Ros Control (NOTA: i comandi fanno riferimento alla versione Melodic di ROS, che dovrebbe essere stato installata seguendo il tutorial per la NRP; nel caso si abbia Ubuntu 16 invece di Ubuntu 18 si è installa la versione Kinetic di ROS e i comandi vanno odificati di conseguenza):
    -# sudo apt-get install ros-melodic-gazebo-ros-pkgs ros-melodic-gazebo-ros-control
  5b.2 Installare MoveIt:
    -# sudo apt install ros-melodic-moveit
    - dovrebbe essere sufficiente il comando sopra, nel caso manchino altre dipendenze installare anche quelle
  5b.3 Utilizzare il setup assistant di MoveIt per generare un pacchetto di controllori predefiniti per il Kuka. Seguire le istruzioni (solo a partire dal punto 1, importando il proprio file urdf come descritto nel seguito, invece che usando quello del braccio Panda) al link: https://ros-planning.github.io/moveit_tutorials/doc/setup_assistant/setup_assistant_tutorial.html
    - Seguire le istruzioni al link riportato sopra, con le seguenti accortezze:
      -- Nella prima schermata selezionare la generazione di un nuovo modello, e importare il file "iiwa_gripper.urdf" che si trova nella cartella creata al punto 4, cioè in $HBP/GazeboRosPackages/src/kuka_iiwa_14_prismatic_gripper/ros/
      -- step 3: il virtual joint on c'è bisogno di crearlo, è già definito all'interno dell'URDF
      -- step 4: 
        --- planning group "iiwa_arm" con joint world_iiwa_joint e quelli da iiwa_joint_1 a iiwa_joint_7
        --- planning group "gripper" con i link rimanenti
      -- step 5: creare una robot pose "neutral_pose" per il planning group "iiwa_arm", con tutti i giunti in posizione nulla
      -- step 6: aggiungere l'end-effector "prismatic_gripper" con parent link "base_link_link"
      -- saltare gli step da 7 a 10, compresi (inizialmente testeremo la NRP con un controllo in coppia, non previsto da MoveIt, che sarà aggiunto manualmente nei passaggi successivi)
      -- concludere il resto della procedura
  5b.4 Verificare che la procedura abbia avuto successo e che esista ora una cartella $HBP/GazeboRosPackages/src/kuka_iiwa_14_prismatic_gripper_config

5c. Copiare i file per il controllo in coppia nella cartella appena generata con il setup assistant:
  - da terminale, recarsi nella directory in cui si è scaricato "kuka_torque_control.zip"
  -# unzip kuka_torque_control.zip
  -# cd kuka_torque_control
  -# cp torque_controllers.yaml $HBP/GazeboRosPackages/src/kuka_iiwa_14_prismatic_gripper_config/config/
  -# cp torque_controllers.launch $HBP/GazeboRosPackages/src/kuka_iiwa_14_prismatic_gripper_config/launch/
  
5d. Ricompilare $HBP/GazeboRosPackages
  -# cd $HBP/GazeboRosPackages
  -# catkin_make
  
6. Lanciare la NRP (vedi istruzioni al punto "Running the platform" del tutorial di installazione)

7. Importare l'esperimento sulla NRP
  - recarsi alla tab "My Experiments" sulla NRP (all'interno del browser)
  - "Import Folder"
  - importare la cartella base_kuka, estratta al punto 2
  
8. Testare la transfer function che genera comandi in coppia casuali per il robot
  - Lanciare l'esperimento (tasto "+ Launch")
  - Dopo un breve caricamento dovrebbe aprirsi una schermata dove è visibile il robot (fermo) all'interno di un ambiente simulato
  - Premere sull'icona delle transfer function (questa icona --> https://imgur.com/a/XhwcyoD)
  - Caricare il file random_torque_controller.py, che si trova all'interno della cartella base_kuka
  - Verificare che sia attivo (slider a destra del nome del file caricato)
  - Avviare la simulazione (tasto con l'icona "play" in alto)
  - Il robot dovrebbe muoversi in maniera casuale. Per verificare che la transfer function stia pubblicando i comandi in coppia per i giunti del robot sul topic corretto di ROS, da terminale dare il comando:
    -# rostopic echo /iiwa/iiwa_effort_controller/command
    - il comando sopra stampa su terminale una copia dei messaggi che vengono mandati sul topic indicato

9. Leggere il (breve) tutorial su ros control, spiega a cosa serve un .yaml  e come funziona il pacchetto ros_control --> http://gazebosim.org/tutorials/?tut=ros_control

########################################################################
### Quando arrivi qui scrivi a me (Francesco Iori) o a Stefano Nardo ###
########################################################################

TASK:
10. Creare un nuovo .yaml file, un nuovo .launch file e una nuova transfer function per dare ingressi ai giunti direttamente in velocità

Buon lavoro
  
  
  
  
  
